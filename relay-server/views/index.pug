//- Copyright 2018 Google LLC.
//-
//- Licensed under the Apache License, Version 2.0 (the "License");
//- you may not use this file except in compliance with the License.
//- You may obtain a copy of the License at
//-
//-     http://www.apache.org/licenses/LICENSE-2.0
//-
//- Unless required by applicable law or agreed to in writing, software
//- distributed under the License is distributed on an "AS IS" BASIS,
//- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//- See the License for the specific language governing permissions and
//- limitations under the License.

//- [START appengine_websockets_index]
doctype html
html(lang="en")
  head
    title OpenAI Relay Server Monitor
    meta(charset="utf-8")
    style.
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body { font: 13px monospace; background: #1e1e1e; color: #d4d4d4; }
      #app { padding: 20px; }
      #status { 
        background: #252526; 
        padding: 10px; 
        border-radius: 4px;
        margin-bottom: 20px;
      }
      #logs {
        background: #252526;
        padding: 10px;
        border-radius: 4px;
        height: calc(100vh - 100px);
        overflow-y: auto;
      }
      .log-entry {
        padding: 5px 0;
        border-bottom: 1px solid #333;
      }
      .timestamp { color: #569cd6; }
      .source { color: #4ec9b0; }
      .type { color: #ce9178; }
      .data { color: #9cdcfe; }
      .openai { color: #dcdcaa; }
      .react { color: #61dafb; }  // React's official color
      .chemistry3d { color: #dcdcaa; }
      .system { color: #569cd6; }
      .sent { opacity: 0.8; }
      .received { opacity: 1; }
      .error { color: #ff6b6b; }
      pre {
        white-space: pre-wrap;
        word-wrap: break-word;
        max-height: 200px;
        overflow-y: auto;
        background: #1e1e1e;
        padding: 8px;
        border-radius: 4px;
        margin-top: 4px;
      }

  body
    div#app
      div#status
        h2 Server Status
        div#status-content
      div#logs
        h2 Event Log
        div#log-content

    script.
      const statusContent = document.getElementById('status-content');
      const logContent = document.getElementById('log-content');

      // Initialize WebSocket connection
      const socket = new WebSocket(`ws://${location.host}/ws`);

      socket.onopen = () => {
        console.log('Connected to server');
      };

      socket.onmessage = (event) => {
        const log = JSON.parse(event.data);

        // Update status
        if (log.type === 'status') {
          statusContent.innerHTML = `
            <div>OpenAI Connected: ${log.isConnected}</div>
            <div>WebSocket Clients: ${log.connectedClients}</div>
            <div>Chemistry3D Connected: ${log.chemistry3dConnected}</div>
            <div>Last Update: ${new Date(log.timestamp).toLocaleTimeString()}</div>
          `;
        } else {
          // Add log entry
          const entry = document.createElement('div');
          entry.className = 'log-entry';

          let dataContent = '';

          // Format log messages based on source and type
          if (log.type === 'conversation.item.update') {
            // Handle conversation updates
            const item = log.item || {};
            const delta = log.delta || {};
            dataContent = `
              <div><strong>Item:</strong> <pre>${JSON.stringify(item, null, 2)}</pre></div>
              <div><strong>Delta:</strong> <pre>${JSON.stringify(delta, null, 2)}</pre></div>
            `;
          } else if (log.source === 'openai') {
            dataContent = `
              <div><strong>Event:</strong> ${log.data.eventName}</div>
              <div><strong>Data:</strong> <pre>${JSON.stringify(log.data.payload || log.data.data, null, 2)}</pre></div>
            `;
          } else if (log.source === 'client') {
            if (log.type === 'audio_chunk_received') {
              dataContent = `Audio chunk: ${log.data.size} samples (${log.data.byteLength} bytes). Total chunks: ${log.data.totalChunks}`;
            } else if (log.type === 'audio_recording' && log.data.audioBase64) {
              const audio = document.createElement('audio');
              audio.controls = true;
              audio.src = 'data:audio/wav;base64,' + log.data.audioBase64;
              dataContent = '';
              entry.appendChild(audio);
            } else {
              dataContent = `<pre>${JSON.stringify(log.data, null, 2)}</pre>`;
            }
          } else {
            // Default case for unknown sources
            dataContent = `<pre>${JSON.stringify(log.data || {}, null, 2)}</pre>`;
          }

          // Handle missing or invalid timestamp
          const timestamp = log.timestamp ? new Date(log.timestamp) : new Date();
          const timeString = isNaN(timestamp.getTime())
            ? new Date().toLocaleTimeString()
            : timestamp.toLocaleTimeString();

          // Handle undefined source and add default styling
          const source = log.source || 'unknown';
          const sourceClass = source === 'unknown' ? 'error' : source;

          entry.innerHTML += `
            <span class="timestamp">[${timeString}]</span>
            <span class="source ${sourceClass}">[${source}]</span>
            <span class="type">${log.type || 'unknown'}</span>
            <span class="data">${dataContent}</span>
          `;
          logContent.appendChild(entry);
          logContent.scrollTop = logContent.scrollHeight;

          // Limit number of log entries to prevent memory issues
          while (logContent.children.length > 1000) {
            logContent.removeChild(logContent.firstChild);
          }
        }
      };
//- [END appengine_websockets_index]

